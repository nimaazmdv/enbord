/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as AppRouteRouteImport } from "./routes/app/route"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as AuthIndexRouteImport } from "./routes/auth/index"
import { Route as AppIndexRouteImport } from "./routes/app/index"
import { Route as AuthSignupRouteImport } from "./routes/auth/signup"
import { Route as AuthSigninRouteImport } from "./routes/auth/signin"
import { Route as AuthCallbackRouteImport } from "./routes/auth/callback"
import { Route as AppHomeRouteImport } from "./routes/app/home"
import { Route as AppBoardsBoardIdRouteImport } from "./routes/app/boards/$boardId"

const AppRouteRoute = AppRouteRouteImport.update({
  id: "/app",
  path: "/app",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: "/auth/",
  path: "/auth/",
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AppRouteRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: "/auth/signup",
  path: "/auth/signup",
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: "/auth/signin",
  path: "/auth/signin",
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: "/auth/callback",
  path: "/auth/callback",
  getParentRoute: () => rootRouteImport,
} as any)
const AppHomeRoute = AppHomeRouteImport.update({
  id: "/home",
  path: "/home",
  getParentRoute: () => AppRouteRoute,
} as any)
const AppBoardsBoardIdRoute = AppBoardsBoardIdRouteImport.update({
  id: "/boards/$boardId",
  path: "/boards/$boardId",
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/app": typeof AppRouteRouteWithChildren
  "/app/home": typeof AppHomeRoute
  "/auth/callback": typeof AuthCallbackRoute
  "/auth/signin": typeof AuthSigninRoute
  "/auth/signup": typeof AuthSignupRoute
  "/app/": typeof AppIndexRoute
  "/auth": typeof AuthIndexRoute
  "/app/boards/$boardId": typeof AppBoardsBoardIdRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/app/home": typeof AppHomeRoute
  "/auth/callback": typeof AuthCallbackRoute
  "/auth/signin": typeof AuthSigninRoute
  "/auth/signup": typeof AuthSignupRoute
  "/app": typeof AppIndexRoute
  "/auth": typeof AuthIndexRoute
  "/app/boards/$boardId": typeof AppBoardsBoardIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/app": typeof AppRouteRouteWithChildren
  "/app/home": typeof AppHomeRoute
  "/auth/callback": typeof AuthCallbackRoute
  "/auth/signin": typeof AuthSigninRoute
  "/auth/signup": typeof AuthSignupRoute
  "/app/": typeof AppIndexRoute
  "/auth/": typeof AuthIndexRoute
  "/app/boards/$boardId": typeof AppBoardsBoardIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/app"
    | "/app/home"
    | "/auth/callback"
    | "/auth/signin"
    | "/auth/signup"
    | "/app/"
    | "/auth"
    | "/app/boards/$boardId"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/app/home"
    | "/auth/callback"
    | "/auth/signin"
    | "/auth/signup"
    | "/app"
    | "/auth"
    | "/app/boards/$boardId"
  id:
    | "__root__"
    | "/"
    | "/app"
    | "/app/home"
    | "/auth/callback"
    | "/auth/signin"
    | "/auth/signup"
    | "/app/"
    | "/auth/"
    | "/app/boards/$boardId"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthCallbackRoute: typeof AuthCallbackRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/app": {
      id: "/app"
      path: "/app"
      fullPath: "/app"
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/auth/": {
      id: "/auth/"
      path: "/auth"
      fullPath: "/auth"
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/app/": {
      id: "/app/"
      path: "/"
      fullPath: "/app/"
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    "/auth/signup": {
      id: "/auth/signup"
      path: "/auth/signup"
      fullPath: "/auth/signup"
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/auth/signin": {
      id: "/auth/signin"
      path: "/auth/signin"
      fullPath: "/auth/signin"
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/auth/callback": {
      id: "/auth/callback"
      path: "/auth/callback"
      fullPath: "/auth/callback"
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/app/home": {
      id: "/app/home"
      path: "/home"
      fullPath: "/app/home"
      preLoaderRoute: typeof AppHomeRouteImport
      parentRoute: typeof AppRouteRoute
    }
    "/app/boards/$boardId": {
      id: "/app/boards/$boardId"
      path: "/boards/$boardId"
      fullPath: "/app/boards/$boardId"
      preLoaderRoute: typeof AppBoardsBoardIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppHomeRoute: typeof AppHomeRoute
  AppIndexRoute: typeof AppIndexRoute
  AppBoardsBoardIdRoute: typeof AppBoardsBoardIdRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppHomeRoute: AppHomeRoute,
  AppIndexRoute: AppIndexRoute,
  AppBoardsBoardIdRoute: AppBoardsBoardIdRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthCallbackRoute: AuthCallbackRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthIndexRoute: AuthIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
